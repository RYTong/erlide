<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0">
    <info>
        <title>Hacking erlide with Git</title>
        <author>
            <personname>
                <firstname>Vlad</firstname>
                <surname>Dumitrescu</surname>
            </personname>
            <email>vladdu55@gmail.com</email>
        </author>
        <copyright>
            <year>2009</year>
            <holder>Vlad Dumitrescu</holder>
        </copyright>
        <legalnotice>
            <title>Terms and conditions regarding the use of this guide</title>
            <para> This documentation is adapted from the pages originally written by <link
                    xlink:href="http://github.com/theory/">David E. Wheeler</link> for <link
                    xlink:href="http://wiki.github.com/bricoleurs/bricolage">bricolage</link> and is
                covered by a <link xlink:href="http://creativecommons.org/licenses/by-nc/3.0/"
                    >Creative Commons</link> license. Thanks a lot!</para>
        </legalnotice>
    </info>
    <annotation>
        <para>We haven't decided yet if we are going to fully migrate to Git, but this information
            might be useful even so.</para>
        <para>Note also that this repository (vladdu/erlide_test) is <emphasis>NOT</emphasis> the
            one that will be the reference one!</para>
    </annotation>
    <section xml:id="working">
        <title xml:id="working.title">Working with Git</title>

        <para>Welcome to the erlide Git repository. We hope you enjoy your stay. In the bad old
            days, the erlide repository was hosted by <link
                xlink:href="http://erlide.cvs.sourceforge.net/viewvc/erlide/erlide">SourceForge
                CVS</link>. Later we migrated to <link
                xlink:href="http://erlide.svn.sourceforge.net/svnroot/erlide">Subversion</link>.
            Today, we're on GitHub, with all of the history from the SVN repository intact and ready
            for you to get hacking. So what are you waiting for? <link
                xlink:href="http://github.com/vladdu/erlide/">Fork</link> and push!</para>


        <para>The erlide project follows the standard <link
                xlink:href="http://github.com/guides/fork-a-project-and-submit-your-modifications"
                >GitHub model</link> for contributions: <link
                xlink:href="http://github.com/vladdu/erlide/">fork</link> a project, clone it to
            your local computer, hack on it there, push your finished changes to your forked
            repository, and send a "Pull Request" back upstream to the project. If you're already
            familiar with this process, then <emphasis>congratulations</emphasis>! You're done here,
                <link xlink:href="http://github.com/vladdu/erlide/">get hacking</link>!</para>

        <section>
            <title>Contributing to erlide</title>
            <para>Still with me? Okay then, let's get you started hacking on erlide. The <link
                    xlink:href="http://github.com/guides/fork-a-project-and-submit-your-modifications"
                    >GitHub guide</link> for the standard fork/clone/push/pull request model of
                contributing is a great place to start, but we'll cover all the basics here, too, as
                well as various contribution scenarios (fixing bugs, adding features, updating
                documentation, etc.).</para>
        </section>
        <section>
            <title>Getting Started</title>
            <para>First, you'll need a GitHub account. If you don't have one, go and <link
                    xlink:href="https://github.com/signup/">sign up now</link>. I'll wait here while
                you do that...</para>

            <para>Okay, done? Great, now you need to <link
                    xlink:href="http://github.com/guides/providing-your-ssh-key">provide your SSH
                    key</link>. Go on, I'll wait again, no big deal...</para>
            <para>Back? Excellent! One more thing to do: you need to <link
                    xlink:href="http://git-scm.com/download">download and install</link> Git and
                then configure it. At a minimum, you'll want to set up your name and email address.
                Git doesn't rely on usernames like Subversion or CVS; you have to give it the whole
                cigar. Here's how:</para>


            <screen>
                git config --global user.name "Your Name Comes Here"
                git config --global user.email you@yourdomain.example.com
            </screen>
            <para>Just for the hell of it, you might want to turn on pretty colors, too, so that
                diffs, statuses, and branches are colored in your terminal:</para>
            <screen>
                git config --global color.diff auto
                git config --global color.status auto
                git config --global color.branch auto
            </screen>
            <para>I recommend to set the handling of line endings, because some of us are working on
                Windows and mixing line endings will create a mess:</para>
            <screen>
                git config --global core.autocrlf input
            </screen>
            <para>If you're familiar with Subversion, I highly recommend that you check out the
                    <link xlink:href="http://git.or.cz/course/svn.html">Git-SVN Crash Course</link>
                for more details like this.</para>

            <para>Okay, now you're ready to grab the erlide repository. Hit the <link
                    xlink:href="http://github.com/erliders/erlide/tree">erlide repository</link>
                page and click the <inlinemediaobject>
                    <imageobject>
                        <imagedata fileref="http://github.com/images/modules/repos/fork_button.png"
                        />
                    </imageobject>
                </inlinemediaobject> button. This will create a complete copy of the erlide
                repository within your GitHub account. Yeah, it's kind of like the old <link
                    xlink:href="http://en.wikipedia.org/wiki/Fork_(software_development)">scary
                    idea</link> of forking, but GitHub has made it an okay thing.
                    <emphasis>Really!</emphasis> Just trust me, okay? Okay, great.</para>

            <para>Now you've got your own fork. This is your own personal copy of the erlide source
                tree, and you can do anything you want with it. Sure, you could run with it in an
                entirely different direction, but the community would frown on that and baby kittens
                would cry. You're much more likely to fix bugs, add features, and maintain hacks
                that only your personal installation requires. It's all good.</para>

            <para>So let's get started. Git is a distributed version control system. Whereas in
                Subversion there was a Canonical repository living on a server somewhere, and you
                sent all your commits there, with Git, you <emphasis>clone</emphasis> a remote
                repository to your local computer, and work exclusively with your cloned copy. When
                you commit, you commit right on your hard disk (this is great for working on
                flights, BTW). When you've reached a spot where you're ready to send it to your
                remote copy of the repository, you <emphasis>push</emphasis> it there.</para>
            <para>Okay, lecture over, let's clone your fork of erlide. I'm assuming, of course, that
                you have <link xlink:href="http://git-scm.org/">Git</link> installed. Just switch to
                a directory where you want to keep your repository and do this, replacing "username"
                with your actual GitHub username:</para>


            <screen>
                git clone git@github.com:username/erlide.git
            </screen>
            <para>Congratulations! You now have your very own erlide repository. Now you'll want to
                make sure that you can always pull down changes from the upstream canonical
                repository. To do so, do this:</para>
            <screen>
                cd erlide
                git remote add upstream git://github.com/erliders/erlide.git 
                git fetch upstream
            </screen>
            <para>Anytime you want to merge in the latest changes from the upstream repository, just
                issue that <code>git fetch upstream</code> command and you'll be good to go.</para>
        </section>
        <section>
            <title>Where to Go From Here</title>
            <para>I'll be writing some other entries for how to perform some common tasks, such as
                fixing a bug, adding a feature, working in a maintenance branch, merging between
                branches, and undertaking a major project - and how to send your contributions
                upstream.</para>
            <itemizedlist>
                <listitem>
                    <para>
                        <link linkend="bugfix" endterm="bugfix.title"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link linkend="branches" endterm="branches.title"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link linkend="projectbranch" endterm="projectbranch.title"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link linkend="merging" endterm="merging.title"/>
                    </para>
                </listitem>

                <listitem>
                    <para>
                        <link linkend="email" endterm="email.title"/>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link linkend="hacks" endterm="hacks.title"/>
                    </para>
                </listitem>
            </itemizedlist>
        </section>
    </section>

    <section xml:id="bugfix">
        <title xml:id="bugfix.title">Contributing a Bug Fix</title>
        <para>This is a simple exercise for those interested in contributing to erlide. Say that you
            find a bug in erlide, or decide to fix an existing bug reported in our <link
                xlink:href="http://erlide.assembla.com/spaces/erlide/tickets">ticket tracker</link>.
            I'm assuming that the bug is in the main branch of the project, <link
                xlink:href="http://github.com/erliders/erlide/tree/master">master</link>. Assuming
            that you have read <link
                xlink:href="http://wiki.github.com/vladdu/erlide_test/working-with-git">Working with
                Git</link> and are ready to start hacking on your forked repository, let's get
            started:</para>



        <screen>
                cd erlide
                git checkout master
                git pull origin
                git pull upstream master
            </screen>
        <para>What you've done here is to check out the master branch and to make sure that you have
            all the latest changes from both your forked repository on GitHub and from the erlide
            project's upstream repository. Now you're ready to fix the bug. All you have to do is
            create a new branch and start hacking:</para>
        <screen>
                git checkout -b 1449
            </screen>
        <para>This command creates a new local branch named “#1449” and checks it out. I've named it
            as such for the bug number. And I say “local branch” because it only exists in the local
            repository; think of it as a working branch to be used just for the duration of fixing
            the bug. So now, go ahead and fix it! As you work, commit early and commit often. You
            can use <code>git add</code> to add one or more files to commit and then commit
            them:</para>

        <screen>
                git add path/to/file.java
                git commit -m 'Fixed typo in `file.java`.
            </screen>
        <para>Or, to commit all your current changes at once, just use <code>git commit
            -a</code>:</para>
        <screen>
                git commit -am 'Removed the `id` field.'
            </screen>
        <para>Note that you can use <link
                xlink:href="http://github.github.com/github-flavored-markdown/">GitHub-Flavored
                Markdown</link> in your commit messages and they'll be nicely formatted on the site.
            Also, we strongly recommend that you write <link
                xlink:href="http://www.tpope.net/node/106">Git-preferred commit messages</link>, as
            they will really help you to review older commits in the future.</para>

        <para>Also, there are <link xlink:href="http://git.or.cz/course/svn.html">some</link>
            <link xlink:href="http://www-cs-students.stanford.edu/~blynn/gitmagic/index.html"
                >great</link>
            <link xlink:href="http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html"
                >tutorials</link> and <link xlink:href="howtwo">howtows</link>
            <link xlink:href="http://book.git-scm.com/">out</link>
            <link xlink:href="http://www.kernel.org/pub/software/scm/git/docs/everyday.html"
                >there</link>, so check them out for more on day-to-day use of Git. Overall, you'll
            want to commit in lots of small commits rather than one big final commit, so that you
            can easily go back and change things if you need to.</para>





        <para>Oh, and don't forget to add a note to <code>CHANGES</code> and commit that,
            too!</para>
        <screen>
                git add CHANGES
                git commit -m 'Give credit where credit is you.'
            </screen>
        <para>When you're done, the bug is fixed, and all tests pass, make sure everything is
            committed and then merge your changes back into master:</para>

        <screen>
                git checkout master
                git merge 1449
                git branch -d 1449
            </screen>
        <para>Great! You've merged all the changes from your branch, and dropped the branch since
            it's no longer needed (all of the commits from the branch were played back into master,
            just as if you'd committed them there). Sure, for a simple bug fix you probably could
            have stayed in master. But with Git it's just as easy to create a working branch for a
            single bug and work on it there, and only merge it back into master when you're done, so
            that you keep things well compartmentalized.</para>
        <para>So far, all of your changes have been made to your local clone of your repository. Now
            it's time to push them upstream to your fork on GitHub. Doing so is easy:</para>
        <screen>
                git push origin master
            </screen>
        <para>Now your own fork has the changes on GitHub, free to be pulled in by anyone else who
            has cloned your fork. But your aim, of course, is to get the bug fix into the project
            repository. Chances are good that a project administrator will see your bug fix merges
            sooner or later and simply pull them in.</para>

        <para>But if you'd like to alert them to the fix so that they pull it in sooner rather than
            later, hit the home page for your fork of the project and click the <inlinemediaobject>
                <imageobject>
                    <imagedata
                        fileref="http://github.com/images/modules/repos/pull_request_button.png"/>
                </imageobject>
            </inlinemediaobject> button. This will open up a lightbox window in which you can type
            up a message to the project administrators, perhaps something like:</para>
        <blockquote>
            <para>Fellow Erliders,</para>
            <para>I've fixed Bug #1449 in my fork. As you know, this is a particularly insidious bug
                that has effected a lot of our user base. I think it'd be worthwhile to pull it into
                the project repository in order to get it into the next release of erlide.</para>
            <para>Thanks!</para>
        </blockquote>
        <para>Be sure that the checkbox next to “erliders” is checked and then hit the “Send Pull
            Request” button. There, you're done.</para>
    </section>
    <section xml:id="branches">
        <title xml:id="branches.title">Working with Branches</title>
        <para>So you've read "<link linkend="working" endterm="working.title"/>" and have your fork
            of the erlide repository. You're way ahead of things because you've also read <link
                linkend="bugfix" endterm="bugfix.title"/> and perhaps contributed a bug fix or two.
            Well, now you've reached the point where you need to fix a bug in a maintenance branch.
            This document is for you.</para>

        <para>In erlide, a "maintenance branch" is a Git branch that is used to maintain a major
            release of erlide, as well as older releases. As of this writing, the maintenance branch
            is <link xlink:href="http://github.com/erliders/erlide/tree/rev_0_6">rev_0_6</link>,
            where we maintain the code for erlide 0.6.x. There are also branches for older
            unmaintained branches. You may ignore those.</para>
        <para>It's important to fix bugs in the current maintenance branch because a lot of people
            are using it, and we routinely issue maintenance releases. So let's say that you decide
            that you'd like to fix some bugs in the rev_0_6 branch. Here's how you do that with
            Git.</para>
        <para>First, change directories into your checkout of your fork of the erlide repository,
            and create a local branch to track the branch maintained upstream:</para>
        <screen>
                cd erlide
                git fetch origin
                git checkout --track -b rev_0_6 origin/rev_0_6
            </screen>
        <para>The call to <code>git fetch origin</code> makes sure that you have copies of all the
            remote branchs. Then the call to <code>git checkout</code> creates a new local branch,
            named "rev_0_6", and sets it to track the branch of the same name stored in your fork of
            erlide. This means that when you make changes to your local rev_0_6 branch and push them
            back to GitHub, they'll be pushed to the remote rev_0_6 branch.</para>

        <para>You only need to create the local tracking branch once in your local repository. Once
            that's done, you can always switch to it in the future using <code>git
            checkout</code>:</para>
        <screen>
                git checkout rev_0_6
                git pull origin
            </screen>
        <para>Now you're ready to go ahead and fix the bugs, push them to your fork (<code>git
                push</code> will push to the tracked fork), send pull requests, and all the rest, as
            described in <link linkend="bugfix" endterm="bugfix.title"/>. When you're done, you can
            always switch back to the master branch simply by checking it out:</para>

        <screen>
                git checkout master
            </screen>
        <para>Yep, that's really all there is to working with existing branches. Have fun!</para>
    </section>
    <section xml:id="projectbranch">
        <title xml:id="projectbranch.title">Starting a Project Branch</title>
        <para>So you've been <link linkend="working">hacking on erlide</link> for a while, <link
                linkend="bugfix">fixed a few bugs</link> in the master branch
                <emphasis>and</emphasis>
            <link linkend="branches">in a maintenance branch</link>, and now you're ready to take on
            a big project. Perhaps you've been accepted in the <link
                xlink:href="http://code.google.com/soc/">Google Summer of Code</link>, or have a
            dire need to add support for a new fancy feature. Yep, you're ready for a major erlide
            undertaking, and therefore your own branch.</para>

        <para>Erlide development branches always start with the string "dev_". So if you were going
            to implement <link xlink:href="http://github.com/klacke/yaws/">yaws</link> support, you
            might want to create a branch called "dev_yaws", like so:</para>

        <screen>
            git checkout -b dev_yaws master
            git push origin dev_yaws
        </screen>

        <para>The call to `git checkout -b` creates the new branch from the "master" branch. The
            call to `git push`, meanwhile, pushes the new branch to your forked copy of the erlide
            repository on GitHub. Now you're set to work on your new branch like you would any other
            branch. You can do whatever you like in this branch, though we do recommend that you
            commit early and often and use the <link xlink:href="message">Git-standard message
                format</link>. Push to your fork regularly, too.</para>
        <para>Periodically, you'll want to pull changes down from the project repository upstream
            and merge them into your branch. Doing so is a cinch with Git. First, make sure that
            your "master" branch is up-to-date:</para>
        <screen>
            git checkout master
            git pull
            git pull upstream master
            git push
        </screen>

        <para>Now switch back to your project branch and merge in the changes:</para>
        <screen>
            git checkout dev_yaws
            git pull master
        </screen>
        <para>The beautiful thing about Git merges is that they are self-tracking, so you don't have
            to remember where you left off the last time you merged, as you would with CVS or
            Subversion. Furthermore, if there are no conflicts, Git will simply replay all of the
            merges into your branch. This means that you get the complete commit record from master.
            If there are conflicts, Git will let you know. Just go and resolve them by modifying the
            files containing the conflicts and then <code>git commit</code> when you're done.</para>
        <para>Once you have finished developing your new feature (including tests, right?), make
            sure that you get it all committed and up-to-date, and then merge your changes into the
            master branch:</para>

        <screen>
            git commit -m 'Yaws support is ready to rock the house!'
            git checkout master
            git pull
            git pull . dev_yaws
            git push
        </screen>
        <para>This time, <code>git pull</code> will play back all of your commits in the dev_yaws
            branch as if you had written them directly into master in the first place (this is known
            as a "Fast-Forward" merge). This gives you the luxury to drop the dev_yaws branch, as
            it's now redundant:</para>
        <screen>
            git branch -d dev_yaws
            git branch -rd dev_yaws
            git push
        </screen>
        <para>The first call to <code>git branch</code> deletes your working copy of the dev_yaws
            branch; the second call deletes the remote branch on GitHub. The call to <code>git
                push</code> makes it so.</para>

        <para>And now you're ready to hit the home page for your fork of the project and click the <inlinemediaobject>
                <imageobject>
                    <imagedata
                        fileref="http://github.com/images/modules/repos/pull_request_button.png"/>
                </imageobject>
            </inlinemediaobject>button to tell us to pull the new feature into the canonical
            repository.</para>
        <para>So what are you waiting for? Get hacking!</para>

    </section>
    <section xml:id="merging">
        <title xml:id="merging.title">Merging with Git</title>
        <para>Merging between branches could not be easier in Git. Gone are the nightmare days of
            manually having to track when you last merged, or when you branched, in order to tell
            Subversion or CVS what commits to merge. Furthermore, a Git merge is a
                <emphasis>real</emphasis> merge.</para>

        <para>When you merge in Subversion, all it does is diff the two branches and then apply the
            diff. Then you commit the merge as one big, gigantic commit. Git, on the other hand, can
            merge branches in a number of different ways (see <link
                xlink:href="http://www.kernel.org/pub/software/scm/git/docs/git-merge.html"
                >git-merge</link> for details). If there are no conflicts, the merge is
            automatically committed with a useful log message. If there <emphasis>are</emphasis>
            conflicts, well you simply resolve them and then commit the merge. Either way, you never
            have to remember when you last merged, because Git remembers for you. You don't even
            have to tag a merge anymore.</para>
        <para>That's not to say that merges will always be simple or easy. It's worthwhile to <link
                xlink:href="http://lwn.net/Articles/210045/">familiarize yourself</link> with the
            Git way of branching and merging.</para>

        <section>
            <title>Example Merge</title>

            <para>Let's say that there have been a bunch of bug fixes in the <link
                    xlink:href="http://github.com/erliders/erlide/tree/rev_0_6">rev_0_6</link>
                maintenance branch, and you want to merge them into <link
                    xlink:href="http://github.com/erliders/erlide/tree/master">master</link> so that
                the next major release will have the same fixes. (This will be a common task for
                erlide core developers to keep things up-to-date in the <link
                    xlink:href="http://github.com/erliders/erlide/tree/master">core
                    repository</link>.) Here's what you do:</para>

            <para>First, make sure that both branches are up-to-date:</para>
            <screen>
            cd erlide
            git checkout rev_0_6
            git pull origin rev_0_6
            git pull upstream rev_0_6
            git push origin rev_0_6
            git checkout master
            git pull origin master
            git pull upstream master            
            </screen>

            <para>We issue to calls to <code>git pull</code> for each branch in order to ensure that
                we have all of the latest commits both from our "origin" repository on GitHub, as
                well as the erlide project's canonical repository up-stream (see "<link
                    linkend="working" endterm="working.title"/>" for how to set up the upstream
                link). We also issue a <code>git push</code> to make sure that all of our local
                changes have been pushed back up to GitHub. Now we're ready to merge!</para>

            <screen>
            git merge rev_0_6
            </screen>

            <para>This command should show what files are being merged, something like this:</para>
            <screen>
            Auto-merging README
            Auto-merging path/to/a/file.java
            Auto-merging some/erlang.erl
        </screen>
            <para>Once it's done, the merge will be committed. <emphasis>Boom!</emphasis> You're
                done. Nothing to do but push the merge up to your fork on GitHub. But if there were
                conflicts, it might look more like this:</para>
            <screen>
            Auto-merging README
            CONFLICT (content): Merge conflict in README
            Auto-merging path/to/a/file.java
            Auto-merging some/erlang.erl
            Automatic merge failed; fix conflicts and then commit the result.
        </screen>
            <para>So you'll have to resolve the conflicts. This basically means that you edit the
                files with conflicts to resolve them, then use <code>git add</code> to stage them to
                be committed. Once you're done, then you commit the merge with <code>git
                    commit</code>. Git will know that it's a merge and generate the appropriate
                commit message.</para>
            <para>That's not to say that merging is always straight-forward. Here are some tips to
                help work through the conflicts:</para>
            <itemizedlist>
                <listitem>
                    <para>If you're familiar with graphical resolution tools, use <code>git
                            mergetool</code> to launch one.</para>
                </listitem>

                <listitem>
                    <para>Use <code>git checkout --ours path/to/file</code> to reset a file to what
                        it was before the merge.</para>
                </listitem>
                <listitem>
                    <para>Use <code>git checkout --theirs path/to/file</code> to reset a file to
                        what's in the merging branch.</para>
                </listitem>
                <listitem>
                    <para>Use <code>git diff ORIG_HEAD</code> to see what the merge has
                        changed.</para>
                </listitem>
                <listitem>
                    <para>Use <code>git add</code> to stage resolved files, even if you used
                            <code>git checkout --ours</code> to throw out all merge changes in a
                        file, as Git will recognize this and remove the file from the list of staged
                        files.</para>
                </listitem>
                <listitem>
                    <para>Use <code>git status</code> to monitor what files have been resolved and
                        which still need help.</para>
                </listitem>
            </itemizedlist>
            <para>The <code>git status</code> command can actually be very useful. It will output
                something like this:</para>

            <screen>
            # On branch master
            # Changes to be committed:
            #   (use "git reset HEAD &lt;file&gt;..." to unstage)
            #
            #	modified:   path/to/a/file.java
            #	modified:   some/erlang.erl
            #
            # Changed but not updated:
            #   (use "git add &lt;file&gt;..." to update what will be committed)
            #   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
            #
            #	unmerged:   README
        </screen>
            <para>Once the "Changed but not updated" section is empty, you're ready to commit the
                merge! Run <code>git commit</code>, accept the default commit message, and you're
                done.</para>

            <para>Well, almost. Whether or not you had commits, you'll want to push the merge up to
                GitHub:</para>
            <screen>
            git push origin master
        </screen>
        </section>
        <section>
            <title>Merging into Core</title>
            <para>As of this writing, the GitHub fork queue <link
                    xlink:href="http://support.github.com/discussions/repos/692-merge-does-not-appear-in-fork-queue"
                    >does not support merges</link>. Until that changes, if you want to get a merge
                into the <link xlink:href="http://github.com/erliders/erlide/tree/master">canonical
                    erlide repository</link>, there are really only two approaches:</para>
            <itemizedlist>
                <listitem>
                    <para>If you have commit access to the <link
                            xlink:href="http://github.com/erliders/erlide/tree/master">canonical
                            repository</link>, you can clone it directly, do the merge, and then
                        push it back up to the "erliders" account.</para>
                </listitem>

                <listitem>
                    <para>If you don't have commit access to the <link
                            xlink:href="http://github.com/erliders/erlide/tree/master">canonical
                            repository</link>, you'll need to do the merge in a fork, push it up to
                        GitHub, and then submit a <link
                            xlink:href="http://github.com/guides/pull-requests">pull request</link>,
                        as usual. It will then be up to a core developer to pull in the merge from
                        your fork.</para>
                </listitem>
            </itemizedlist>
            <para>If you are an erlide core developer, and you or someone else has performed merge
                in a fork, here's how you pull it into the <link
                    xlink:href="http://github.com/erliders/erlide/tree/master">canonical
                    repository</link> replacing Git URL on the <code>git add remote</code> line with
                the name of the forked repository with the merge to be pulled in:</para>

            <screen>
            git clone git@github.com:erliders/erlide.git
            cd erlide
            git remote add merger git://github.com/username/erlide.git
            git pull merger master
            git push origin master
            git remote rm merger
            </screen>

            <para>This allows you to pull in all changes from the forked repository, including the
                merge. If that is the only difference between the fork and the canonical repository,
                this will work well. If it's not the only difference, you might have to <link
                    xlink:href="http://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html"
                    >cherry-pick</link> commits to pull in. YMMV.</para>
        </section>

    </section>
    <section xml:id="email">
        <title xml:id="email.title">Contributing via Email</title>
        <para>If for some reason you're not keen on <link xlink:href="https://github.com/signup/"
                >getting a GitHub account</link> and <link linkend="bugfix">forking Bricolage</link>
            in order to contribute, you can still contribute to erlide the old-fashioned way. Here's
            what to do:</para>

        <para>First, clone the public copy of the <link
                xlink:href="http://github.com/erliders/erlide/tree/master">core repository</link>
            directly:</para>

        <screen>
            git clone git://github.com/erliders/erlide.git
        </screen>
        <para>Now go ahead and make your changes as described in <link linkend="bugfix"
                endterm="bugfix.title"/>. Once you've got things where you want them, you'll need to
            generate a patch to send to the <link
                xlink:href="https://sourceforge.net/mailarchive/forum.php?forum_name=erlide-devel"
                >developers mail list</link> (subscribe <link
                xlink:href="erlide-devel@lists.sourceforge.net">here</link>). Git conveniently
            provides <link
                xlink:href="http://www.kernel.org/pub/software/scm/git/docs/git-format-patch.html"
                >git-format-patch</link> for this purpose:</para>
        <screen>
            git format-patch origin
        </screen>
        <para>This will extract all commits in the current branch but not in the origin branch and
            save them in multiple files, one per commit, formatted to resemble UNIX mailbox format.
            You can then use <link
                xlink:href="http://www.kernel.org/pub/software/scm/git/docs/git-send-email.html"
                >git-send-mail</link> to send the patches off to the mail list. There, a core
            developer can integrate them as appropriate with <link
                xlink:href="http://www.kernel.org/pub/software/scm/git/docs/git-am.html"
                >git-am</link>.</para>

        <para>As of this writing, no one has done this yet, so please feel free to fill in details
            based on your experiences.</para>
    </section>
    <section xml:id="hacks">
        <title xml:id="hacks.title">Git Hacks</title>
        <section>
            <title><code>bash</code> Prompt</title>
            <para>Bash users, check out <link
                    xlink:href="http://railstips.org/2009/2/2/bedazzle-your-bash-prompt-with-git-info"
                    >this guide</link> for essentially the same hack.</para>
        </section>
        <section>
            <title><code>zsh</code> Prompt</title>
            <para>I borrowed this code from the <link xlink:href="http://github.com/bkerley/zshkit/"
                    >zshkit project</link>. Just drop it into your <code>~/.zshrc</code> file. It
                adds the current branch name to the <code>zsh</code> prompt, so that I know at a
                glance what branch I'm on when I'm in a directory with a branch. It also changes the
                color of the branch name from cyan to magenta depending on whether or not there are
                any local changes. Very handy if you're used to working in a directory named for a
                Subversion branch. Check it out <link
                    xlink:href="http://gist.github.com/raw/102291/c929c76e187884b5e075f6184182877170799581/gistfile1.sh"
                    >here.</link></para>

        </section>
    </section>
</chapter>
